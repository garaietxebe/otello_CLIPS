; Othello jokoa
; Autores: Garai eta Urdax
; Data: 30/04/2025 - ...


; Definición de plantillas

; Plantilla para representar el tablero
(deftemplate tablero
   (slot dimension (type INTEGER) (default 8))
   (slot turno (type SYMBOL) (allowed-values negro blanco) (default negro)))

; Plantilla para representar una casilla del tablero
(deftemplate casilla
   (slot fila (type INTEGER))
   (slot columna (type INTEGER)) ;SARTU HEMEN OPTION CUANDO TIRE
   (slot estado (type SYMBOL) (allowed-values vacia negra blanca) (default vacia)))

; Plantilla para representar la cantidad de fichas disponibles de cada jugador
(deftemplate fichas-disponibles
   (slot jugador (type SYMBOL) (allowed-values negro blanco))
   (slot cantidad (type INTEGER) (default 32)))

; Plantilla para mostrar mensajes al usuario
(deftemplate mensaje
   (slot texto (type STRING)))

; Plantilla para controlar la visualización del tablero
(deftemplate visualizar
   (slot mostrar (type SYMBOL) (allowed-values si no) (default no)))

;Plantilla para acabar el juego en caso de movimientos legales inexistentes 
(deftemplate game-state
   (slot consecutive-switches (type INTEGER) (default 0)))

; Reglas del juego

; Regla para inicializar el tablero
(defrule inicializar-tablero
   (declare (salience 100))
   (not (tablero))
   =>
   (assert (tablero))
   (assert (game-state))  ; Initialize game state
   (assert (mensaje (texto "Tablero inicializado. Dimension: 8x8"))))

; Regla para inicializar las fichas disponibles
(defrule inicializar-fichas
   (declare (salience 99))
   (not (fichas-disponibles (jugador negro)))
   (not (fichas-disponibles (jugador blanco)))
   =>
   (assert (fichas-disponibles (jugador negro) (cantidad 30)))
   (assert (fichas-disponibles (jugador blanco) (cantidad 30)))
   (assert (mensaje (texto "Fichas inicializadas. Cada jugador tiene 30 fichas disponibles."))))

; Regla para crear casillas vacías
(defrule crear-casillas-vacias
   (declare (salience 98))
   (tablero (dimension ?dim))
   (not (casilla (fila 1) (columna 1)))
   =>
   (loop-for-count (?i 1 ?dim) do
      (loop-for-count (?j 1 ?dim) do
         (assert (casilla (fila ?i) (columna ?j) (estado vacia))))))

; Regla para colocar las fichas iniciales en el centro del tablero
(defrule colocar-fichas-iniciales
   (declare (salience 97))
   ?t <- (tablero (dimension ?dim))
   ?c1 <- (casilla (fila ?mid) (columna ?mid) (estado vacia))
   ?c2 <- (casilla (fila ?mid) (columna ?mid2) (estado vacia))
   ?c3 <- (casilla (fila ?mid2) (columna ?mid) (estado vacia))
   ?c4 <- (casilla (fila ?mid2) (columna ?mid2) (estado vacia))
   ?f1 <- (fichas-disponibles (jugador negro) (cantidad ?cant-negro))
   ?f2 <- (fichas-disponibles (jugador blanco) (cantidad ?cant-blanco))
   (test (= ?mid (/ ?dim 2)))
   (test (= ?mid2 (+ ?mid 1)))
   =>
   (modify ?c1 (estado blanca))
   (modify ?c2 (estado negra))
   (modify ?c3 (estado negra))
   (modify ?c4 (estado blanca))
   (modify ?f1 (cantidad (- ?cant-negro 2)))
   (modify ?f2 (cantidad (- ?cant-blanco 2)))
   (assert (mensaje (texto "Fichas iniciales colocadas en el tablero.")))
   (assert (visualizar (mostrar si))))  ; Activar la visualización del tablero después de colocar las fichas iniciales

; Regla para mostrar el estado del tablero
(defrule mostrar-tablero
   (declare (salience -100))
   (tablero (dimension ?dim) (turno ?turno))
      ?v <- (visualizar (mostrar si))
   =>

   (printout t crlf)
   (printout t "Estado del tablero:" crlf)
   (printout t "Turno: " ?turno crlf)
   (printout t "  ") 
   (printout t crlf)
   (printout t "     1     2    3    4    5    6    7     8" crlf)
   (printout t "   +---+---+---+---+---+---+---+---+" crlf)
(loop-for-count (?i 1 ?dim) do
   (printout t (str-cat ?i " |"))
   (loop-for-count (?j 1 ?dim) do
      (bind ?estado (fact-slot-value (nth$ 1 (find-fact ((?c casilla)) 
                           (and (eq ?c:fila ?i) (eq ?c:columna ?j)))) estado))
      (if (eq ?estado vacia)
   then (printout t "  ·  |")
   else (if (eq ?estado option)
           then (printout t "  X  |"))
           else (if (eq ?estado negra)
                   then (printout t " N |")
                   else (printout t " B |"))))
   (printout t crlf)
   (printout t "   +---+---+---+---+---+---+---+---+" crlf))
(printout t "     1     2    3    4    5   6     7     8" crlf)

    ; Contar fichas
   (bind ?negras (length$ (find-all-facts ((?c casilla)) (eq ?c:estado negra))))
   (bind ?blancas (length$ (find-all-facts ((?c casilla)) (eq ?c:estado blanca))))
         (printout t "  ") 
   (printout t crlf)

   ; Imprimir
   (printout t "Fichas negras: " ?negras ", Fichas blancas: " ?blancas crlf)

   (printout t "  ") 
   (printout t crlf)
)

; Regla para mostrar mensajes
(defrule mostrar-mensaje
   ?m <- (mensaje (texto ?texto))
   =>
   (printout t ?texto crlf)
   (retract ?m))

; Función para iniciar el juego
(deffunction iniciar-juego ()
   (reset)
   (run))

; Función para mostrar el tablero manualmente
(deffunction mostrar ()
   (assert (visualizar (mostrar si)))
   (run))

 ;okupatuta_dago

   (deffunction okupatuta_dago (?fila ?columna)
   ; TRUE okupauta
   ; FALSE hutsa
   
   ; Bilatu
   (bind ?casillas (find-fact ((?c casilla)) 
                              (and (eq ?c:fila ?fila) 
                                   (eq ?c:columna ?columna))))
   
   (bind ?casilla (nth$ 1 ?casillas))
   (bind ?estado (fact-slot-value ?casilla estado))
   
   (if (eq ?estado vacia)
       then
       (return FALSE)  ; No está ocupada
       else
       (return TRUE)   ; Está ocupada (negra o blanca)
   )
)


(deffunction mugimendu_egokia (?fila ?columna ?estado)
   ; Versión de mugimendu_egokia sin mensajes de error
   
   ; 1. ¿Está dentro del tablero?
   (if (not (and (>= ?fila 1)(<= ?fila 8) (>= ?columna 1)(<= ?columna 8)))
       then (return FALSE))

   ; 2. ¿Casilla vacía?
   (if (okupatuta_dago ?fila ?columna)
       then (return FALSE))
   
   ; 3. ¿Flanquea al menos una ficha?
   (bind ?opposite (if (eq ?estado negra) then blanca else negra))
   (bind ?found FALSE)
   
   ; Verificar en las 8 direcciones
   (loop-for-count (?dx -1 1) do
      (loop-for-count (?dy -1 1) do
         (if (and (not (and (eq ?dx 0) (eq ?dy 0)))
                  (>= (+ ?fila ?dx) 1) (<= (+ ?fila ?dx) 8)
                  (>= (+ ?columna ?dy) 1) (<= (+ ?columna ?dy) 8))
             then
             (bind ?x (+ ?fila ?dx))
             (bind ?y (+ ?columna ?dy))
             ; Verificar casilla adyacente
             (bind ?casillas (find-fact ((?c casilla))
                                      (and (eq ?c:fila ?x)
                                           (eq ?c:columna ?y))))
             
             (if (and (> (length$ ?casillas) 0)
                     (eq (fact-slot-value (nth$ 1 ?casillas) estado) ?opposite))
                 then
                 ; Hay una ficha opuesta adyacente, ahora seguir en esta dirección
                 (bind ?x (+ ?x ?dx))
                 (bind ?y (+ ?y ?dy))
                 
                 ; Seguir buscando en esta dirección
                 (while (and (>= ?x 1) (<= ?x 8) (>= ?y 1) (<= ?y 8))
                    (bind ?casillas (find-fact ((?c casilla))
                                            (and (eq ?c:fila ?x)
                                                 (eq ?c:columna ?y))))
                    
                    (if (> (length$ ?casillas) 0)
                        then
                        (bind ?estado-actual (fact-slot-value (nth$ 1 ?casillas) estado))
                        (if (eq ?estado-actual ?estado)
                            then
                            ; Encontramos una ficha del mismo color, flanqueo verificado
                            (bind ?found TRUE)
                            (break))
                        (if (eq ?estado-actual vacia)
                            then
                            ; Espacio vacío, no hay flanqueo
                            (break))
                        ; Si es una ficha opuesta, continuar buscando
                        (bind ?x (+ ?x ?dx))
                        (bind ?y (+ ?y ?dy)))
                 )
             )
         )
      )
   )
   
   (return ?found)
)

(deffunction mostrar-movimientos-disponibles (?estado)
   ; Reset previous options
   (do-for-all-facts ((?c casilla)) 
      (eq ?c:estado option)
      (modify ?c (estado vacia)))

   (printout t "Mugimendu posibleak " ?estado "entzat:" crlf)
   (bind ?count 0)
   (bind ?movimientos (create$))
   
   ; Find valid moves
   (loop-for-count (?fila 1 8) do
      (loop-for-count (?columna 1 8) do
         (if (and (not (okupatuta_dago ?fila ?columna))
                 (mugimendu_egokia ?fila ?columna ?estado))
             then
             (bind ?casilla (nth$ 1 (find-fact ((?c casilla))
                                              (and (eq ?c:fila ?fila)
                                                   (eq ?c:columna ?columna)))))
             ;(modify ?casilla (estado option)) DESKOMENTAU
             (bind ?movimientos (create$ ?movimientos (str-cat "(" ?fila "," ?columna ")")))
             (bind ?count (+ ?count 1))
         )
      )
   )
   
   ; Handle no moves case or show available moves
   (if (= ?count 0)
       then 
       (printout t "Ez dago mugimendu posibleik." crlf)
       (bind ?game-state (nth$ 1 (find-fact ((?g game-state)) TRUE)))
       (bind ?switches (fact-slot-value ?game-state consecutive-switches))
       (modify ?game-state (consecutive-switches (+ ?switches 1)))

       (if (= (+ ?switches 1) 2)
           then
           ; Game over logic
           (bind ?negras (length$ (find-all-facts ((?c casilla)) (eq ?c:estado negra))))
           (bind ?blancas (length$ (find-all-facts ((?c casilla)) (eq ?c:estado blanca))))
           (printout t crlf "=== GAME OVER ===" crlf)
           (printout t "Final score:" crlf)
           (printout t "Black pieces: " ?negras crlf)
           (printout t "White pieces: " ?blancas crlf)
           (if (> ?negras ?blancas)
               then (printout t "Black wins!" crlf)
               else (if (< ?negras ?blancas)
                       then (printout t "White wins!" crlf)
                       else (printout t "It's a tie!" crlf)))
           (return FALSE)
           else
           ; Auto-switch turn only when no moves available
           (bind ?tablero (nth$ 1 (find-fact ((?t tablero)) TRUE)))
           (bind ?turno-actual (fact-slot-value ?tablero turno))
           (modify ?tablero (turno (if (eq ?turno-actual negro) then blanco else negro)))
           (printout t "Txanda automatikoki aldatu da." crlf)
           (return FALSE))
       else 
       ; Show available moves when there are options
       (foreach ?mov ?movimientos
           (printout t ?mov " "))
       (printout t crlf)
       (printout t "Guztira: " ?count " mugimendu" crlf crlf)
       (assert (visualizar (mostrar si)))
       (run)
       (return TRUE))
)





(deffunction AP (?fila ?columna ?estado)
   ; Verificar si es el turno correcto
   (bind ?tablero (nth$ 1 (find-fact ((?t tablero)) TRUE)))
   (bind ?turno-actual (fact-slot-value ?tablero turno))
   (bind ?color-turno (if (eq ?turno-actual negro) then negra else blanca))
   
   ; Verificar si el color de la pieza corresponde al turno actual
   (if (neq ?estado ?color-turno)
       then
       (printout t "Error: No es el turno de " ?estado ". Es el turno de " ?color-turno "." crlf)
       (return FALSE))
   
   ; Verificar si el movimiento es válido
   (if (not (mugimendu_egokia ?fila ?columna ?estado))
       then
       (printout t "Error: Movimiento no válido (" ?fila "," ?columna ")." crlf)
       (return FALSE))
   
   ; Colocar la nueva ficha
   (bind ?c (nth$ 1 (find-fact ((?c casilla))
                           (and (eq ?c:fila ?fila)
                                (eq ?c:columna ?columna)))))
   (modify ?c (estado ?estado))
   
   ; Actualizar el contador de fichas (reduzca las disponibles)
   (bind ?f (nth$ 1 (find-fact ((?f fichas-disponibles)) (eq ?f:jugador ?turno-actual))))
   (if (> (fact-slot-value ?f cantidad) 0)
       then
       (modify ?f (cantidad (- (fact-slot-value ?f cantidad) 1))))
   
   ; Voltear las fichas del oponente
   (bind ?opposite (if (eq ?estado negra) then blanca else negra))
   (bind ?total-flipped 0)  ; Contador de fichas volteadas
   
   ; Verificar en las 8 direcciones
   (loop-for-count (?dx -1 1) do
      (loop-for-count (?dy -1 1) do
         (if (and (not (and (eq ?dx 0) (eq ?dy 0)))  ; No es la propia casilla
                  (>= (+ ?fila ?dx) 1) (<= (+ ?fila ?dx) 8)
                  (>= (+ ?columna ?dy) 1) (<= (+ ?columna ?dy) 8))
             then
             (bind ?x (+ ?fila ?dx))
             (bind ?y (+ ?columna ?dy))
             
             ; Verificar casilla adyacente
             (bind ?casillas (find-fact ((?c casilla))
                                      (and (eq ?c:fila ?x)
                                           (eq ?c:columna ?y))))
             
             (if (and (> (length$ ?casillas) 0)
                     (eq (fact-slot-value (nth$ 1 ?casillas) estado) ?opposite))
                 then
                 ; Hay una ficha opuesta adyacente, recopilar todas las fichas a voltear
                 (bind ?to-flip (create$))
                 (bind ?to-flip (create$ ?to-flip (nth$ 1 ?casillas)))  ; Añadir la primera ficha opuesta
                 
                 (bind ?x (+ ?x ?dx))
                 (bind ?y (+ ?y ?dy))
                 (bind ?valid-direction FALSE)
                 
                 ; Seguir en esta dirección buscando fichas a voltear
                 (while (and (>= ?x 1) (<= ?x 8) (>= ?y 1) (<= ?y 8))
                    (bind ?casillas (find-fact ((?c casilla))
                                            (and (eq ?c:fila ?x)
                                                 (eq ?c:columna ?y))))
                    
                    (if (> (length$ ?casillas) 0)
                        then
                        (bind ?current-cell (nth$ 1 ?casillas))
                        (bind ?estado-actual (fact-slot-value ?current-cell estado))
                        
                        (if (eq ?estado-actual ?estado)
                            then
                            ; Encontramos una ficha del mismo color, flanqueo verificado
                            (bind ?valid-direction TRUE)
                            (break))
                        
                        (if (eq ?estado-actual vacia)
                            then
                            ; Espacio vacío, no hay flanqueo
                            (break))
                        
                        ; Si es una ficha opuesta, añadirla a las que se voltearán
                        (bind ?to-flip (create$ ?to-flip ?current-cell))
                        (bind ?x (+ ?x ?dx))
                        (bind ?y (+ ?y ?dy)))
                 )
                 
                 ; Si la dirección es válida, voltear todas las fichas recopiladas
                 (if ?valid-direction
                     then
                     (foreach ?piece ?to-flip
                        (if (neq ?piece nil)
                            then
                            (modify ?piece (estado ?estado))
                            (bind ?total-flipped (+ ?total-flipped 1))))
                 )
             )
         )
      )
   )
   
   ; Actualizar los contadores de fichas tras el volteo
   (if (> ?total-flipped 0)
       then
       (bind ?f-player (nth$ 1 (find-fact ((?f fichas-disponibles)) 
                                        (eq ?f:jugador ?turno-actual))))
       (bind ?f-opponent (nth$ 1 (find-fact ((?f fichas-disponibles)) 
                                          (eq ?f:jugador (if (eq ?turno-actual negro) then blanco else negro)))))
       
       (modify ?f-player (cantidad (- (fact-slot-value ?f-player cantidad) ?total-flipped)))
       (modify ?f-opponent (cantidad (+ (fact-slot-value ?f-opponent cantidad) ?total-flipped)))
   )
   
   ; Cambiar el turno
   (modify ?tablero (turno (if (eq ?turno-actual negro) then blanco else negro)))

   
   ; Mensaje de confirmación
   (printout t "Pieza añadida en (" ?fila ", " ?columna ") con color: " ?estado crlf)
   (printout t "Fichas volteadas: " ?total-flipped crlf)
   
   ; Mostrar el tablero actualizado
   (assert (visualizar (mostrar si)))
   
   (run)
   
   ; Mostrar movimientos del siguiente jugador
   (bind ?siguiente-turno (if (eq ?estado negra) then blanca else negra))
   (printout t crlf ">>> Turno de " (if (eq ?siguiente-turno negra) then "NEGRAS" else "BLANCAS") ":" crlf)
   (mostrar-movimientos-disponibles ?siguiente-turno)
   
   (return TRUE)
)

(deffunction jugar (?fila ?columna)
   ; Función simplificada para facilitar el juego
   (bind ?tablero (nth$ 1 (find-fact ((?t tablero)) TRUE)))
   (bind ?turno-actual (fact-slot-value ?tablero turno))
   (bind ?color-turno (if (eq ?turno-actual negro) then negra else blanca))
   
   ; Realizar el movimiento con el color del turno actual
   (AP ?fila ?columna ?color-turno)
)