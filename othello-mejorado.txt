; Othello jokoa
; Egileak: Garai eta Urdax
; Data: 2025/04/30 - 2025/05/15


; plantillak

; taula
(deftemplate tablero
   (slot dimension (type INTEGER) (default 8))
   (slot turno (type SYMBOL) (allowed-values negro blanco) (default negro)))

; taulako gelaxkak
(deftemplate casilla
   (slot fila (type INTEGER))
   (slot columna (type INTEGER)) ; SARTU HEMEN AUKERA BOTATZEAN
   (slot estado (type SYMBOL) (allowed-values vacia negra blanca) (default vacia)))

; jokalari bakoitzaren fitxa kopurua
(deftemplate fichas-disponibles
   (slot jugador (type SYMBOL) (allowed-values negro blanco))
   (slot cantidad (type INTEGER) (default 32)))

; jokalariari mezua
(deftemplate mensaje
   (slot texto (type STRING)))

; taula erakusteko
(deftemplate visualizar
   (slot mostrar (type SYMBOL) (allowed-values si no) (default no)))

;jokoa amaitzeko
(deftemplate game-state
   (slot consecutive-switches (type INTEGER) (default 0)))

; arauak

; taula hasteko
(defrule inicializar-tablero
   (declare (salience 100))
   (not (tablero))
   =>
   (assert (tablero))
   (assert (auto-white on))
   (assert (game-state))  
   (assert (mensaje (texto "Taula hasieratuta. Dimentsioa: 8x8"))))

; fitxak hasieratzeko
(defrule inicializar-fichas
   (declare (salience 99))
   (not (fichas-disponibles (jugador negro)))
   (not (fichas-disponibles (jugador blanco)))
   =>
   (assert (fichas-disponibles (jugador negro) (cantidad 30)))
   (assert (fichas-disponibles (jugador blanco) (cantidad 30)))
   (assert (mensaje (texto "Fitxak hasieratuta."))))

; gelaxka hutsak sortzeko
(defrule crear-casillas-vacias
   (declare (salience 98))
   (tablero (dimension ?dim))
   (not (casilla (fila 1) (columna 1)))
   =>
   (loop-for-count (?i 1 ?dim) do
      (loop-for-count (?j 1 ?dim) do
         (assert (casilla (fila ?i) (columna ?j) (estado vacia))))))

; Fitxak erdian jartzeko
(defrule colocar-fichas-iniciales
   (declare (salience 97))
   ?t <- (tablero (dimension ?dim))
   ?c1 <- (casilla (fila ?mid) (columna ?mid) (estado vacia))
   ?c2 <- (casilla (fila ?mid) (columna ?mid2) (estado vacia))
   ?c3 <- (casilla (fila ?mid2) (columna ?mid) (estado vacia))
   ?c4 <- (casilla (fila ?mid2) (columna ?mid2) (estado vacia))
   ?f1 <- (fichas-disponibles (jugador negro) (cantidad ?cant-negro))
   ?f2 <- (fichas-disponibles (jugador blanco) (cantidad ?cant-blanco))
   (test (= ?mid (/ ?dim 2)))
   (test (= ?mid2 (+ ?mid 1)))
   =>
   (modify ?c1 (estado blanca))
   (modify ?c2 (estado negra))
   (modify ?c3 (estado negra))
   (modify ?c4 (estado blanca))
   (modify ?f1 (cantidad (- ?cant-negro 2)))
   (modify ?f2 (cantidad (- ?cant-blanco 2)))
   (assert (mensaje (texto "Hasierako fitxak taulan jarrita.")))
   (assert (visualizar (mostrar si))))  ; Taularen bistaratzea aktibatu hasierako fitxak jarri ondoren

; Taularen egoera erakusteko araua
(defrule mostrar-tablero
   (declare (salience -100))
   (tablero (dimension ?dim) (turno ?turno))
      ?v <- (visualizar (mostrar si))
   =>

   (printout t crlf)
   (printout t "  ") 
   (printout t crlf)
   (printout t "     1     2    3    4    5    6    7     8" crlf)
   (printout t "   +---+---+---+---+---+---+---+---+" crlf)
(loop-for-count (?i 1 ?dim) do
   (printout t (str-cat ?i " |"))
   (loop-for-count (?j 1 ?dim) do
      (bind ?estado (fact-slot-value (nth$ 1 (find-fact ((?c casilla)) 
                           (and (eq ?c:fila ?i) (eq ?c:columna ?j)))) estado))
      (if (eq ?estado vacia)
   then (printout t "  Â·  |")
   else (if (eq ?estado option)
            then (printout t "  X  |"))
           else (if (eq ?estado negra)
                   then (printout t " N |")
                   else (printout t " B |"))))
   (printout t crlf)
   (printout t "   +---+---+---+---+---+---+---+---+" crlf))
(printout t "     1     2    3    4    5   6     7     8" crlf)

    ; Fitxak zenbatu
   (bind ?negras (length$ (find-all-facts ((?c casilla)) (eq ?c:estado negra))))
   (bind ?blancas (length$ (find-all-facts ((?c casilla)) (eq ?c:estado blanca))))
         (printout t "  ") 
   (printout t crlf)

   ; Inprimatu
   (printout t "Fitxa beltzak: " ?negras ", Fitxa zuriak: " ?blancas crlf)

   (printout t "  ") 
   (printout t crlf)
)

; Mezuak erakusteko araua
(defrule mostrar-mensaje
   ?m <- (mensaje (texto ?texto))
   =>
   (printout t ?texto crlf)
   (retract ?m))

; Jokoa hasteko funtzioa
(deffunction iniciar-juego ()
   (reset)
   (run))

(deffunction ij ()
   (iniciar-juego)
)

(deffunction c ()
   (clear)
)

; Taula eskuz erakusteko funtzioa
(deffunction mostrar ()
   (assert (visualizar (mostrar si)))
   (run))

 ;okupatuta_dago

   (deffunction okupatuta_dago (?fila ?columna)
   ; TRUE okupatuta
   ; FALSE hutsa
   
   ; Bilatu
   (bind ?casillas (find-fact ((?c casilla)) 
                              (and (eq ?c:fila ?fila) 
                                    (eq ?c:columna ?columna))))
   
   (bind ?casilla (nth$ 1 ?casillas))
   (bind ?estado (fact-slot-value ?casilla estado))
   
   (if (eq ?estado vacia)
       then
       (return FALSE)  ; Ez dago okupatuta
       else
       (return TRUE)   ; Okupatuta dago (beltza edo zuria)
   )
)


(deffunction mugimendu_egokia (?fila ?columna ?estado)
   ; mugimendu_egokiaren bertsioa errore mezurik gabe
   
   ; 1. Taula barruan dago?
   (if (not (and (>= ?fila 1)(<= ?fila 8) (>= ?columna 1)(<= ?columna 8)))
       then (return FALSE))

   ; 2. Gelaxka hutsa?
   (if (okupatuta_dago ?fila ?columna)
       then (return FALSE))
   
   ; 3. Gutxienez fitxa bat inguratzen du?
   (bind ?opposite (if (eq ?estado negra) then blanca else negra))
   (bind ?found FALSE)
   
   ; Egiaztatu 8 norabideetan
   (loop-for-count (?dx -1 1) do
      (loop-for-count (?dy -1 1) do
         (if (and (not (and (eq ?dx 0) (eq ?dy 0)))
                  (>= (+ ?fila ?dx) 1) (<= (+ ?fila ?dx) 8)
                  (>= (+ ?columna ?dy) 1) (<= (+ ?columna ?dy) 8))
             then
             (bind ?x (+ ?fila ?dx))
             (bind ?y (+ ?columna ?dy))
             ; Egiaztatu alboko gelaxka
             (bind ?casillas (find-fact ((?c casilla))
                                        (and (eq ?c:fila ?x)
                                           (eq ?c:columna ?y))))
             
             (if (and (> (length$ ?casillas) 0)
                      (eq (fact-slot-value (nth$ 1 ?casillas) estado) ?opposite))
                 then
                 ; Alboko aurkako fitxa bat dago, orain norabide honetan jarraitu
                 (bind ?x (+ ?x ?dx))
                 (bind ?y (+ ?y ?dy))
                 
                 ; Norabide honetan bilatzen jarraitu
                 (while (and (>= ?x 1) (<= ?x 8) (>= ?y 1) (<= ?y 8))
                    (bind ?casillas (find-fact ((?c casilla))
                                                 (and (eq ?c:fila ?x)
                                                 (eq ?c:columna ?y))))
                    
                    (if (> (length$ ?casillas) 0)
                        then
                        (bind ?estado-actual (fact-slot-value (nth$ 1 ?casillas) estado))
                        (if (eq ?estado-actual ?estado)
                            then
                            ; Kolore bereko fitxa bat aurkitu dugu, inguraketa egiaztatuta
                            (bind ?found TRUE)
                            (break))
                        (if (eq ?estado-actual vacia)
                            then
                            ; Espazio hutsa, ez dago inguraketarik
                            (break))
                        ; Aurkako fitxa bada, bilatzen jarraitu
                        (bind ?x (+ ?x ?dx))
                        (bind ?y (+ ?y ?dy)))
                 )
             )
         )
      )
   )
   
   (return ?found)
)

(deffunction mostrar-movimientos-disponibles (?estado)
   ; Aurreko aukerak berrezarri
   (do-for-all-facts ((?c casilla)) 
      (eq ?c:estado option)
      (modify ?c (estado vacia)))

   (printout t "Mugimendu posibleak " ?estado "entzat:" crlf)
   (bind ?count 0)
   (bind ?movimientos (create$))
   
   ; Mugimendu baliodunak aurkitu
   (loop-for-count (?fila 1 8) do
      (loop-for-count (?columna 1 8) do
         (if (and (not (okupatuta_dago ?fila ?columna))
                 (mugimendu_egokia ?fila ?columna ?estado))
             then
             (bind ?casilla (nth$ 1 (find-fact ((?c casilla))
                                             (and (eq ?c:fila ?fila)
                                                   (eq ?c:columna ?columna)))))
             ;(modify ?casilla (estado option)) DESKOMENTATU
             (bind ?movimientos (create$ ?movimientos (str-cat "(" ?fila "," ?columna ")")))
             (bind ?count (+ ?count 1))
         )
      )
   )
   
   ; Mugimendurik ez dagoen kasua kudeatu edo eskuragarri dauden mugimenduak erakutsi
   (if (= ?count 0)
       then 
       (printout t "Ez dago mugimendu posibleik." crlf)
       (bind ?game-state (nth$ 1 (find-fact ((?g game-state)) TRUE)))
       (bind ?switches (fact-slot-value ?game-state consecutive-switches))
       (modify ?game-state (consecutive-switches (+ ?switches 1)))

       (if (= (+ ?switches 1) 2)
           then
           ; Jokoa amaitzeko logika
           (bind ?negras (length$ (find-all-facts ((?c casilla)) (eq ?c:estado negra))))
           (bind ?blancas (length$ (find-all-facts ((?c casilla)) (eq ?c:estado blanca))))
           (printout t crlf "=== JOKOA AMAITU DA ===" crlf)
           (printout t "Azken puntuazioa:" crlf)
           (printout t "Fitxa beltzak: " ?negras crlf)
           (printout t "Fitxa zuriak: " ?blancas crlf)
           (if (> ?negras ?blancas)
               then (printout t "Beltzak irabazi du!" crlf)
               else (if (< ?negras ?blancas)
                       then (printout t "Zuriak irabazi du!" crlf)
                       else (printout t "Berdinketa!" crlf)))
           (return FALSE)
           else
           ; Txanda automatikoki aldatu soilik mugimendurik ez dagoenean
           (bind ?tablero (nth$ 1 (find-fact ((?t tablero)) TRUE)))
           (bind ?turno-actual (fact-slot-value ?tablero turno))
           (modify ?tablero (turno (if (eq ?turno-actual negro) then blanco else negro)))
           (printout t "Txanda automatikoki aldatu da." crlf)
           (return FALSE))
       else 
       ; Eskuragarri dauden mugimenduak erakutsi aukerak daudenean
       (foreach ?mov ?movimientos
           (printout t ?mov " "))
       (printout t crlf)
       (printout t "Guztira: " ?count " mugimendu" crlf crlf)
       (assert (visualizar (mostrar si)))
       (run)
       (return TRUE))
)





(deffunction AP (?fila ?columna ?estado)
   ; Egiaztatu txanda zuzena den
   (bind ?tablero (nth$ 1 (find-fact ((?t tablero)) TRUE)))
   (bind ?turno-actual (fact-slot-value ?tablero turno))
   (bind ?color-turno (if (eq ?turno-actual negro) then negra else blanca))

   ; Ondoz ondoko aldaketen kontagailua berrezarri mugimendu baliodun bat egiten denean
   (bind ?game-state (nth$ 1 (find-fact ((?g game-state)) TRUE)))
   (modify ?game-state (consecutive-switches 0))
   
   
   ; Egiaztatu piezaren kolorea uneko txandari dagokion
   (if (neq ?estado ?color-turno)
       then
       (printout t "Errorea: Ez da " ?estado "(r)en txanda. " ?color-turno "(r)en txanda da." crlf)
       (return FALSE))
   
   ; Egiaztatu mugimendua balioduna den
   (if (not (mugimendu_egokia ?fila ?columna ?estado))
       then
       (printout t "Errorea: Mugimendu ez balioduna (" ?fila "," ?columna ")." crlf)
       (return FALSE))
   
   ; Fitxa berria jarri
   (bind ?c (nth$ 1 (find-fact ((?c casilla))
                           (and (eq ?c:fila ?fila)
                                (eq ?c:columna ?columna)))))
   (modify ?c (estado ?estado))
   
   ; Fitxen kontagailua eguneratu (eskuragarri daudenak murriztu)
   (bind ?f (nth$ 1 (find-fact ((?f fichas-disponibles)) (eq ?f:jugador ?turno-actual))))
   (if (> (fact-slot-value ?f cantidad) 0)
       then
       (modify ?f (cantidad (- (fact-slot-value ?f cantidad) 1))))
   
   ; Aurkariaren fitxak irauli
   (bind ?opposite (if (eq ?estado negra) then blanca else negra))
   (bind ?total-flipped 0)  ; Iraulitako fitxen kontagailua
   
   ; Egiaztatu 8 norabideetan
   (loop-for-count (?dx -1 1) do
      (loop-for-count (?dy -1 1) do
         (if (and (not (and (eq ?dx 0) (eq ?dy 0)))  ; Ez da gelaxka bera
                  (>= (+ ?fila ?dx) 1) (<= (+ ?fila ?dx) 8)
                  (>= (+ ?columna ?dy) 1) (<= (+ ?columna ?dy) 8))
             then
             (bind ?x (+ ?fila ?dx))
             (bind ?y (+ ?columna ?dy))
             
             ; Egiaztatu alboko gelaxka
             (bind ?casillas (find-fact ((?c casilla))
                                        (and (eq ?c:fila ?x)
                                           (eq ?c:columna ?y))))
             
             (if (and (> (length$ ?casillas) 0)
                     (eq (fact-slot-value (nth$ 1 ?casillas) estado) ?opposite))
                 then
                 ; Alboko aurkako fitxa bat dago, iraultzeko fitxa guztiak bildu
                 (bind ?to-flip (create$))
                 (bind ?to-flip (create$ ?to-flip (nth$ 1 ?casillas)))  ; Gehitu lehen aurkako fitxa
                 
                 (bind ?x (+ ?x ?dx))
                 (bind ?y (+ ?y ?dy))
                 (bind ?valid-direction FALSE)
                 
                 ; Norabide honetan jarraitu iraultzeko fitxak bilatzen
                 (while (and (>= ?x 1) (<= ?x 8) (>= ?y 1) (<= ?y 8))
                    (bind ?casillas (find-fact ((?c casilla))
                                             (and (eq ?c:fila ?x)
                                                 (eq ?c:columna ?y))))
                    
                    (if (> (length$ ?casillas) 0)
                        then
                        (bind ?current-cell (nth$ 1 ?casillas))
                        (bind ?estado-actual (fact-slot-value ?current-cell estado))
                        
                        (if (eq ?estado-actual ?estado)
                            then
                            ; Kolore bereko fitxa bat aurkitu dugu, inguraketa egiaztatuta
                            (bind ?valid-direction TRUE)
                            (break))
                        
                        (if (eq ?estado-actual vacia)
                            then
                            ; Espazio hutsa, ez dago inguraketarik
                            (break))
                        
                        ; Aurkako fitxa bada, gehitu irauliko diren fitxei
                        (bind ?to-flip (create$ ?to-flip ?current-cell))
                        (bind ?x (+ ?x ?dx))
                        (bind ?y (+ ?y ?dy)))
                    )
                 
                 ; Norabidea balioduna bada, bildutako fitxa guztiak irauli
                 (if ?valid-direction
                     then
                     (foreach ?piece ?to-flip
                        (if (neq ?piece nil)
                            then
                            (modify ?piece (estado ?estado))
                            (bind ?total-flipped (+ ?total-flipped 1))))
                 )
             )
         )
      )
   )
   
   ; Fitxen kontagailuak eguneratu iraulketaren ondoren
   (if (> ?total-flipped 0)
       then
       (bind ?f-player (nth$ 1 (find-fact ((?f fichas-disponibles)) 
                                        (eq ?f:jugador ?turno-actual))))
       (bind ?f-opponent (nth$ 1 (find-fact ((?f fichas-disponibles)) 
                                          (eq ?f:jugador (if (eq ?turno-actual negro) then blanco else negro)))))
       
       (modify ?f-player (cantidad (- (fact-slot-value ?f-player cantidad) ?total-flipped)))
       (modify ?f-opponent (cantidad (+ (fact-slot-value ?f-opponent cantidad) ?total-flipped)))
   )
   
   ; Txanda aldatu
   (modify ?tablero (turno (if (eq ?turno-actual negro) then blanco else negro)))

   
   ; Berrespen mezua
   (printout t "Pieza gehituta (" ?fila ", " ?columna ") kokalekuan, kolorea: " ?estado crlf)
   (printout t "Iraulitako fitxak: " ?total-flipped crlf)
   
   ; Taula eguneratua erakutsi
   (assert (visualizar (mostrar si)))
   
   (run)
   
   ; Hurrengo jokalariaren mugimenduak erakutsi soilik auto-white ez bada
      (bind ?siguiente-turno (if (eq ?estado negra) then blanca else negra))
      (if (eq ?siguiente-turno negra)
         then 
         (printout t crlf ">>> BELTZEN txanda:" crlf)
         (mostrar-movimientos-disponibles negra))
   
   (return TRUE)
)

(deffunction a (?fila ?columna)
   (AP ?fila ?columna negra)
)




(deffunction calcular-volteos (?fila ?columna ?estado ?recursivo)
   (bind ?opposite (if (eq ?estado negra) then blanca else negra))
   (bind ?total-flipped 0)
   
    (bind ?is-corner (or 
      (and (eq ?fila 1) (eq ?columna 1))
      (and (eq ?fila 1) (eq ?columna 8))
      (and (eq ?fila 8) (eq ?columna 1))
      (and (eq ?fila 8) (eq ?columna 8))))

   (bind ?is-edge (and (not ?is-corner)
      (or (eq ?fila 1) (eq ?fila 8)
          (eq ?columna 1) (eq ?columna 8))))
          ; Izkin eta ertzen detekziorako inprimatze-adierazpenak soilik recursivo TRUE bada
         (if ?recursivo then
            (if ?is-corner then
                (printout t "Bonusa: izkina (" ?fila "," ?columna ") kokalekuan!" crlf))
            (if ?is-edge then
                 (printout t "Bonusa: ertza (" ?fila "," ?columna ") kokalekuan!" crlf)))

   ; Deialdi errekurtsiboa egin soilik recursivo TRUE bada
   (if ?recursivo then
      (bind ?opponent-estado (if (eq ?estado negra) then blanca else negra))
      (bind ?opponent-flips (calcular-volteos ?fila ?columna ?opponent-estado FALSE))
      (if (>= ?opponent-flips 4) then
         (printout t "AAk beltzen posizio estrategiko bat hartu du!" crlf)
         (bind ?total-flipped (+ ?total-flipped 2))
      )
   )

   (loop-for-count (?dx -1 1) do
      (loop-for-count (?dy -1 1) do
         (if (and (not (and (eq ?dx 0) (eq ?dy 0)))
                  (>= (+ ?fila ?dx) 1) (<= (+ ?fila ?dx) 8)
                  (>= (+ ?columna ?dy) 1) (<= (+ ?columna ?dy) 8))
             then
             (bind ?x (+ ?fila ?dx))
             (bind ?y (+ ?columna ?dy))
             (bind ?casillas (find-fact ((?c casilla))
                                      (and (eq ?c:fila ?x)
                                           (eq ?c:columna ?y))))
             
             (if (and (> (length$ ?casillas) 0)
                     (eq (fact-slot-value (nth$ 1 ?casillas) estado) ?opposite))
                then
                 (bind ?flipped 1)  ; Zenbaketa lehen aurkako piezatik hasi
                 (bind ?x (+ ?x ?dx))
                 (bind ?y (+ ?y ?dy))
                 
                 (while (and (>= ?x 1) (<= ?x 8) (>= ?y 1) (<= ?y 8))
                    (bind ?casillas (find-fact ((?c casilla))
                                            (and (eq ?c:fila ?x)
                                                 (eq ?c:columna ?y))))
                    
                     (if (> (length$ ?casillas) 0)
                        then
                        (bind ?estado-actual (fact-slot-value (nth$ 1 ?casillas) estado))
                        (if (eq ?estado-actual ?estado)
                            then
                            (bind ?total-flipped (+ ?total-flipped ?flipped))
                            (if ?is-corner then
                                    (bind ?total-flipped (+ ?total-flipped 5))
                               else 
                                    (if ?is-edge then
                                       (bind ?total-flipped (+ ?total-flipped 2))))
                            (break))
                        (if (eq ?estado-actual vacia)
                            then
                            (bind ?flipped 0)  ; Berrezarri espazio huts bat jotzen badugu
                            (break))
                        ; Egiaztatu iraultzeko uneko pieza ertzean dagoen
                        (if (or (= ?x 1) (= ?x 8) (= ?y 1) (= ?y 8))
                            then
                             (bind ?flipped (+ ?flipped 1.5))  ; Ertzetako piezek 1.5 balio dute
                            else
                            (bind ?flipped (+ ?flipped 1)))   ; Pieza normalek 1 balio dute
                        (bind ?x (+ ?x ?dx))
                        (bind ?y (+ ?y ?dy)))
                 )
             )
         )
      )
   )
   (return ?total-flipped)
)

; MUGIMENDURIK EZ BADUZU BELTZAK BEREAK IKUSI BEHAR DITU
(defrule auto-white-move
   (declare (salience 50))
   (auto-white on)
   (tablero (turno blanco))
   =>
   (printout t "Auto-white modua: eskuragarri dauden mugimenduak aztertzen..." crlf)
   (bind ?found FALSE)
   (bind ?max-flips 0)
   (bind ?best-moves (create$))  ; Iraulketa gehien dituzten mugimendu guztiak gordetzeko zerrenda
   
    (bind ?has-moves FALSE)
   (loop-for-count (?fila 1 8) do
      (loop-for-count (?columna 1 8) do
          (if (mugimendu_egokia ?fila ?columna blanca)
             then
             (bind ?has-moves TRUE)
             (break))))
   
   ; Mugimendurik ez badago, deitu mostrar-movimientos-disponibles jauzia kudeatzeko
   (if (not ?has-moves)
       then
       (printout t "Auto-whitek ez du mugimendu erabilgarririk." crlf)
       (mostrar-movimientos-disponibles blanca)
       (return))


   ; Mugimendu posible guztiak aurkitu eta onenak jarraitu
   (loop-for-count (?fila 1 8) do
      (loop-for-count (?columna 1 8) do
          (if (mugimendu_egokia ?fila ?columna blanca)
             then
             (bind ?flips (calcular-volteos ?fila ?columna blanca TRUE))
             (printout t "Posizioa (" ?fila "," ?columna ") aukeratua izateko " ?flips " puntu izango lituzke" crlf)
             
             ; Mugimendu hobea aurkitu badugu, zerrenda garbitu eta berria hasi
             (if (> ?flips ?max-flips)
                 then
                 (bind ?found TRUE)
                 (bind ?max-flips ?flips)
                 (bind ?best-moves (create$ (create$ ?fila ?columna ?flips)))
             else 
                 ; Berdin ona den mugimendu bat aurkitu badugu, gehitu zerrendara
                 (if (and ?found (= ?flips ?max-flips))
                      then
                     (bind ?best-moves (create$ ?best-moves (create$ ?fila ?columna ?flips)))))
         )
      )
   )
   
   (if ?found
       then
       ; Mugimendu kopurua kalkulatu (mugimendu bakoitza 3 elementu dira: fila, columna, flips)
       (bind ?num-moves (div (length$ ?best-moves) 3))  ; Erabili div / ordez zatiketa osorako
       (bind ?random-index (random 1 ?num-moves))
       (bind ?selected-move (subseq$ ?best-moves (+ (* (- ?random-index 1) 3) 1) (* ?random-index 3)))
       (bind ?best-fila (nth$ 1 ?selected-move))
       (bind ?best-columna (nth$ 2 ?selected-move))
       
       (bind ?is-corner (or 
          (and (eq ?best-fila 1) (eq ?best-columna 1))
          (and (eq ?best-fila 1) (eq ?best-columna 8))
          (and (eq ?best-fila 8) (eq ?best-columna 1))
          (and (eq ?best-fila 8) (eq ?best-columna 8))))
       (bind ?is-edge (and (not ?is-corner)
          (or (eq ?best-fila 1) (eq ?best-fila 8)
              (eq ?best-columna 1) (eq ?best-columna 8))))
              
       (printout t "Auto-whitek fitxa zuria (" ?best-fila "," ?best-columna 
                 ") kokalekuan jartzen du " ?max-flips " punturekin" crlf)
       (AP ?best-fila ?best-columna blanca)
   )
)


(deffunction jugar (?fila ?columna)
   ; Jolastea errazteko funtzio sinplifikatua
   (bind ?tablero (nth$ 1 (find-fact ((?t tablero)) TRUE)))
   (bind ?turno-actual (fact-slot-value ?tablero turno))
   (bind ?color-turno (if (eq ?turno-actual negro) then negra else blanca))
   
   ; Egin mugimendua uneko txandaren kolorearekin
   (AP ?fila ?columna ?color-turno)
)